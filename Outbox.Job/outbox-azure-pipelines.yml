trigger:
  branches:
    include:
    - main
  paths:
    include:
    - Outbox.Job

pool: 
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: 'Build and Push'
    variables:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      dotNetFramework: 'net6.0'
      targetRuntime: 'linux-x64'
      hostProject: 'Outbox.Job/src/Outbox.Job.Host/Outbox.Job.Host.csproj'
    jobs:
      - job: Build
        displayName: 'Build'
        steps:
        - task: DotNetCoreCLI@2
          displayName: 'Build'
          inputs:
            command: 'build'
            projects: $(hostProject)
            arguments: '--configuration $(buildConfiguration)'

        - task: CopyFiles@2
          displayName: 'Copy Manifests'
          inputs:
            SourceFolder: 'Outbox.Job/src/Outbox.Job.Host/pipeline'
            Contents: |
              service.yml
              deployment.yml
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish Manifest Artifact'
          inputs:
            targetPath: $(build.artifactStagingDirectory)
            artifact: 'manifestDrop'
            publishLocation: 'pipeline'

        - task: DotNetCoreCLI@2
          displayName: 'Dotnet publish'
          inputs:
            command: 'publish'
            publishWebProjects: false 
            projects: $(hostProject)
            nobuild: true
            zipAfterPublish: false
            arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --runtime $(targetRuntime) --self-contained --output $(Build.ArtifactStagingDirectory)'
          
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: outbox-job
            Dockerfile: $(build.artifactStagingDirectory)/Outbox.Job.Host/Dockerfile
            containerRegistry: pvauthorizationcr-sc
            tags: |
              1.0.0

  - stage: DeployDev
    displayName: Deploy DEV
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy job
      environment: 'DEV'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: 'manifestDrop'
                  targetPath: '$(System.ArtifactsDirectory)/manifests'
              
              - task: KubernetesManifest@0
                displayName: Create imagePullSecret
                inputs:
                  action: createSecret
                  namespace: default
                  secretName: secret
                  dockerRegistryEndpoint: pvauthorizationcr-sc
                  kubernetesServiceConnection: pvauthorizationaks-sc
              
              - task: KubernetesManifest@0
                displayName: Deploy to Kubernetes cluster
                inputs:
                  action: deploy
                  namespace: default
                  manifests: |
                    $(System.ArtifactsDirectory)/manifests/deployment.yml
                    $(System.ArtifactsDirectory)/manifests/service.yml
                  imagePullSecrets: |
                    secret
                  containers: |
                    pvauthorizationcr.azurecr.io/outbox-job:1.0.0
                  kubernetesServiceConnection: pvauthorizationaks-sc