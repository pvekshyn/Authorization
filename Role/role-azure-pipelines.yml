variables:
  needToUnitTest: false
  needToIntegrationTest: false
  needToUpdateDatabase: false
  needToUpdateAppImage: false

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - Role

pool: 
  vmImage: ubuntu-latest

stages:
  - stage: BuildAndTest
    displayName: 'Build and test'
    variables:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      dotNetFramework: 'net6.0'
      targetRuntime: 'linux-x64'
      hostProject: 'Role/src/Role.Host.API/Role.Host.API.csproj'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and test'
        steps:

        - task: CopyFiles@2
          displayName: 'Copy Manifests'
          inputs:
            SourceFolder: 'Role/src/Role.Host.API/pipeline'
            Contents: |
              service.yml
              deployment.yml
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish Manifest Artifact'
          inputs:
            targetPath: $(build.artifactStagingDirectory)
            artifact: 'manifestDrop'
            publishLocation: 'pipeline'
        
        - task: NuGetToolInstaller@1
        
        - task: DotNetCoreCLI@2
          displayName: 'Nuget restore'
          condition: needToUpdateAppImage
          inputs:
            command: restore
            projects: $(hostProject)
            feedsToUse: 'select'
            vstsFeed: 'Authorization/authorizationFeed'
            includeNuGetOrg: true         
        
        - task: DotNetCoreCLI@2
          displayName: 'Build'
          condition: needToUpdateAppImage
          inputs:
            command: 'build'
            projects: |
              $(hostProject)
              Outbox.Job/src/Outbox.Database/Build.Outbox.Database.csproj
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Dotnet publish'
          inputs:
            command: 'publish'
            publishWebProjects: false 
            projects: 'Role/src/Role.Host.API/Role.Host.API.csproj'
            nobuild: true
            zipAfterPublish: false
            arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --runtime $(targetRuntime) --self-contained --output $(Build.ArtifactStagingDirectory)'
        
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Database Artifact'
          inputs:
            targetPath: 'Role/tests/integration/Role.Integration.Tests/bin/Release/netstandard2.0'
            artifact: 'dbDrop'
            publishLocation: 'pipeline'

        - task: CmdLine@2
          inputs:
            script: |
              echo "build.artifactStagingDirectory:"
              tree $(build.artifactStagingDirectory)
          
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: role-api
            Dockerfile: $(build.artifactStagingDirectory)/Role.Host.API/Dockerfile
            containerRegistry: pvauthorizationcr-sc
            tags: |
              1.0.0

        - task: DotNetCoreCLI@2
          displayName: 'Unit tests'
          inputs:
            command: test
            projects: 'Role/tests/unit/*/*.csproj'
            arguments: '--configuration $(buildConfiguration)'
        
        - task: DotNetCoreCLI@2
          displayName: 'Integration tests'
          condition: eq(1,2)
          inputs:
            command: test
            projects: 'Role/tests/integration/*/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

  - stage: deploy_dev
    displayName: 'Deploy DEV'
    jobs:
    - job: preDeploy
      condition: eq(1,2)
      pool: 
        vmImage: 'windows-latest'
      displayName: 'Predeploy'
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Database Artifact'
          inputs:
            buildType: 'current'
            artifactName: 'dbDrop'
            targetPath: '$(Pipeline.Workspace)/drop'
    
        - task: SqlAzureDacpacDeployment@1
          displayName: 'Publish Role dacpac'
          inputs:
            azureSubscription: 'authorization_sc'
            AuthenticationType: 'connectionString'
            ConnectionString: 'Server=authorization-db.database.windows.net,1433;Initial Catalog=role;User ID=pv;Password=password#123;TrustServerCertificate=True;'
            DacpacFile: '$(Pipeline.Workspace)/drop/Build.Role.Database.dacpac'
    
        - task: SqlAzureDacpacDeployment@1
          displayName: 'Publish Outbox dacpac'
          inputs:
            azureSubscription: 'authorization_sc'
            AuthenticationType: 'connectionString'
            ConnectionString: 'Server=authorization-db.database.windows.net,1433;Initial Catalog=role;User ID=pv;Password=password#123;TrustServerCertificate=True;'
            DacpacFile: '$(Pipeline.Workspace)/drop/Build.Outbox.Database.dacpac'

    - deployment: Deploy
      displayName: Deploy
      environment: 'DEV'
      dependsOn: preDeploy
      condition: in(dependencies.preDeploy.result, 'Succeeded', 'Skipped')
      strategy: 
        runOnce:
          deploy:
            steps:
              - download: none

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: 'manifestDrop'
                  targetPath: '$(System.ArtifactsDirectory)/manifests'

              - task: KubernetesManifest@0
                displayName: Create imagePullSecret
                inputs:
                  action: createSecret
                  namespace: default
                  secretName: secret
                  dockerRegistryEndpoint: pvauthorizationcr-sc
                  kubernetesServiceConnection: pvauthorizationaks-sc
              
              - task: KubernetesManifest@0
                displayName: Deploy to Kubernetes cluster
                inputs:
                  action: deploy
                  namespace: default
                  manifests: |
                    $(System.ArtifactsDirectory)/manifests/deployment.yml
                    $(System.ArtifactsDirectory)/manifests/service.yml
                  imagePullSecrets: |
                    secret
                  containers: |
                    pvauthorizationcr.azurecr.io/role-api:1.0.0
                  kubernetesServiceConnection: pvauthorizationaks-sc