trigger:
  branches:
    include:
    - main
  paths:
    include:
    - Role

pool: 
  vmImage: ubuntu-latest

stages:
  - stage: BuildAndTest
    displayName: 'Build and test'
    variables:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      dotNetFramework: 'net6.0'
      targetRuntime: 'linux-x64'
      projects: 'Role/**/*.csproj'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and test'
        steps:
        - task: NuGetToolInstaller@1
        
        - task: DotNetCoreCLI@2
          displayName: 'Nuget restore'
          inputs:
            command: restore
            projects: $(projects)
            feedsToUse: 'select'
            vstsFeed: 'Authorization/authorizationFeed'
            includeNuGetOrg: true         
        
        - task: DotNetCoreCLI@2
          displayName: 'Build'
          inputs:
            command: 'build'
            projects: |
              $(projects)
              Outbox.Job/src/Outbox.Database/Build.Outbox.Database.csproj
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Dotnet publish'
          inputs:
            command: 'publish'
            publishWebProjects: false 
            projects: 'Role/src/Role.Host.API/Role.Host.API.csproj'
            arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --runtime $(targetRuntime) --self-contained --output $(Build.ArtifactStagingDirectory)'
        
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Project Artifact'
          inputs:
            targetPath: $(build.artifactStagingDirectory)
            artifact: 'projectDrop'
            publishLocation: 'pipeline'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish Database Artifact'
          inputs:
            targetPath: 'Role/tests/integration/Role.Integration.Tests/bin/Release/netstandard2.0'
            artifact: 'dbDrop'
            publishLocation: 'pipeline'

        - task: DotNetCoreCLI@2
          displayName: 'Unit tests'
          inputs:
            command: test
            projects: 'Role/tests/unit/*/*.csproj'
            arguments: '--configuration $(buildConfiguration)'
        
        - task: DotNetCoreCLI@2
          displayName: 'Integration tests'
          condition: eq(1,2)
          inputs:
            command: test
            projects: 'Role/tests/integration/*/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

  - stage: deploy_dev
    displayName: 'Deploy DEV'
    variables:
      system.debug: true
    jobs:
      - job: preDeploy
        pool: 'windows-latest'
        displayName: 'Predeploy DEV'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Database Artifact'
            inputs:
              buildType: 'current'
              artifactName: 'dbDrop'
              targetPath: '$(Pipeline.Workspace)/drop'

          - task: SqlAzureDacpacDeployment@1
            displayName: 'Publish Database'
            inputs:
              azureSubscription: 'authorization_sc'
              AuthenticationType: 'connectionString'
              ConnectionString: 'Server=tcp:authorization-db.database.windows.net,1433;Initial Catalog=role;User ID=pv;Password=password#123;TrustServerCertificate=True;'
              DacpacFile: '$(Pipeline.Workspace)/drop/Build.Role.Database.dacpac'

      - job: deploy
        displayName: 'Deploy DEV'
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'projectDrop'
              targetPath: '$(Pipeline.Workspace)/drop'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'authorization_sc'
              appType: 'webAppLinux'
              appName: 'pv-role'
              runtimeStack: 'DOTNETCORE|6.0'
              package: '$(Pipeline.Workspace)/drop/Role.Host.API.zip'
              deploymentMethod: 'runFromPackage'