@page "/"
@inject IPubSubQuery pubSubQuery
@inject IDatabaseQuery databaseQuery
@inject ILogger<Index> logger

@using Monitoring.Logic

<PageTitle>Monitoring</PageTitle>

<div class="container">
    <img src="images/1.png" />
    <div class="assignment">@_assignmentsCount</div>
    <div class="outbox">@_assignmentsOutboxCount</div>
    <div class="pubsub">@_pubSubCount</div>
    <div class="inbox">@_authorizationInboxCount</div>
    <div class="accessentry">@_accessEntriesCount</div>
</div>

@code {
    private int _assignmentsCount = 0;
    private int _assignmentsOutboxCount = 0;
    private int _pubSubCount = 0;
    private int _authorizationInboxCount = 0;
    private int _accessEntriesCount = 0;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            using var periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(500));
            while (await periodicTimer.WaitForNextTickAsync())
            {
                _assignmentsCount = await RefreshIfSuccess(_assignmentsCount, databaseQuery.GetAssignmentsCountAsync);
                await InvokeAsync(StateHasChanged);

                _assignmentsOutboxCount = await RefreshIfSuccess(_assignmentsOutboxCount, databaseQuery.GetAssignmentOutboxCountAsync);
                await InvokeAsync(StateHasChanged);

                _pubSubCount = await RefreshIfSuccess(_pubSubCount, pubSubQuery.GetMessagesCountAsync);
                await InvokeAsync(StateHasChanged);

                _authorizationInboxCount = await RefreshIfSuccess(_authorizationInboxCount, databaseQuery.GetAclInboxCountAsync);
                await InvokeAsync(StateHasChanged);

                _accessEntriesCount = await RefreshIfSuccess(_accessEntriesCount, databaseQuery.GetAclCountAsync);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task<int> RefreshIfSuccess(int previous, Func<Task<int>> func)
    {
        try
        {
            return await func();
        }
        catch (Exception e)
        {
            //logger.LogError(e.Message);
        }

        return previous;
    }
}