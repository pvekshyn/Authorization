variables:
  needToUpdateAppImage: false
  needToUpdateDatabase: false
  needToRunIntegrationTests: true

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - Assignment

pool: 
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: 'Build'
    jobs:

      - job: Manifest
        displayName: 'Publish Manifest Artifact'
        steps:
        - template: ../pipeline/publish-manifests-artifact.yml
          parameters:
            manifestsFolder: 'Assignment/src/Assignment.Host.API/pipeline'

      - job: BuildHost
        displayName: 'Build and push image to ACR'
        condition: and(succeeded(), eq(variables.needToUpdateAppImage, 'true'))
        steps:

        - template: ../pipeline/build-host-and-push-acr-image.yml
          parameters:
            hostProject: 'Assignment/src/Assignment.Host.API/Assignment.Host.API.csproj'
            hostName: 'Assignment.Host.API'
            acrRepository: 'assignment-api'

      - job: BuildDatabase
        displayName: 'Build Database and publish artifact'
        condition: and(succeeded(), or (
          eq(variables.needToUpdateDatabase, 'true'), 
          eq(variables.needToRunIntegrationTests, 'true')))
        steps:
        - template: ../pipeline/build-database-and-publish-artifact.yml
          parameters:
            dbProjectPath: 'Assignment/src/Assignment.Database/Build.Assignment.Database.csproj'
            dacpacFolder: 'Assignment/src/Assignment.Database/bin/Release/netstandard2.0'
            dacpacName: 'Build.Assignment.Database.dacpac'

      - job: UnitTests
        displayName: 'Unit tests'
        steps:
         - template: ../pipeline/run-tests.yml
           parameters:
             testFolder: 'Assignment/tests/unit'

      - job: IntegrationTests
        displayName: 'Integration tests'
        dependsOn: BuildDatabase
        steps:
         - template: ../pipeline/run-integration-tests.yml
           parameters:
             testFolder: 'Assignment/tests/integration/Assignment.Integration.Tests'

  - stage: deploy_dev
    displayName: 'Deploy DEV'
    jobs:

    - job: publishDB
      displayName: 'Publish Database'
      condition: and(succeeded(), eq(variables.needToUpdateDatabase, 'true'))
      pool: 
        vmImage: 'windows-latest'
      steps:
        - checkout: none

        - template: ../pipeline/deploy-database.yml
          parameters:
            dbName: 'assignment'
            dacpacFileName: 'Build.Assignment.Database.dacpac'
    
    - deployment: Deploy
      displayName: Deploy
      environment: 'DEV'
      dependsOn: publishDB
      condition: and(not(canceled()), in(dependencies.publishDB.result, 'Succeeded', 'Skipped'))
      strategy: 
        runOnce:
          deploy:
            steps:
            - download: none

            - template: ../pipeline/deploy-acr-image-to-aks.yml
              parameters:
                acrRepository: 'assignment'
                serviceName: 'assignment-api'